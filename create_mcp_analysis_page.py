#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MCP Ë®≠ÂÆöÊ†ºÂºèÂ∑ÆÁï∞ÂàÜÊûê - Notion Ë≥áÊñôÂ∫´Êï¥ÂêàËÖ≥Êú¨
Author: Christian Wu
Date: 2025-06-11
"""

import requests
import json
import os
from datetime import datetime
from typing import Dict, List, Any

class NotionMCPIntegration:
    def __init__(self, token: str):
        """ÂàùÂßãÂåñ Notion API ÂÆ¢Êà∂Á´Ø"""
        self.token = token
        self.base_url = "https://api.notion.com/v1"
        self.headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json',
            'Notion-Version': '2022-06-28'
        }
        
    def create_mcp_analysis_page(self, database_id: str) -> Dict[str, Any]:
        """Âª∫Á´ã MCP Ë®≠ÂÆöÊ†ºÂºèÂ∑ÆÁï∞ÂàÜÊûêÈ†ÅÈù¢"""
        
        # È†ÅÈù¢Âü∫Êú¨Â±¨ÊÄß
        properties = self._get_page_properties()
        
        # È†ÅÈù¢ÂÖßÂÆπÂçÄÂ°ä
        content_blocks = self._get_content_blocks()
        
        payload = {
            "parent": {
                "database_id": database_id
            },
            "properties": properties,
            "children": content_blocks
        }
        
        try:
            print("üì§ Ê≠£Âú®ÁôºÈÄÅË´ãÊ±ÇÂà∞ Notion API...")
            response = requests.post(
                f"{self.base_url}/pages",
                headers=self.headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                print("‚úÖ ÊàêÂäüÂª∫Á´ã MCP ÂàÜÊûêÈ†ÅÈù¢ÔºÅ")
                return response.json()
            else:
                print(f"‚ùå Âª∫Á´ãÂ§±Êïó: {response.status_code}")
                print(f"ÈåØË™§Ë©≥ÊÉÖ: {response.text}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Á∂≤Ë∑ØË´ãÊ±ÇÈåØË™§: {e}")
            return None
    
    def _get_page_properties(self) -> Dict[str, Any]:
        """ÂèñÂæóÈ†ÅÈù¢Â±¨ÊÄßË®≠ÂÆö"""
        return {
            "Name": {
                "title": [
                    {
                        "text": {
                            "content": "MCP Ë®≠ÂÆöÊ†ºÂºèÂ∑ÆÁï∞ÂàÜÊûêÊåáÂçó"
                        }
                    }
                ]
            }
        }
    
    def _get_content_blocks(self) -> List[Dict[str, Any]]:
        """ÂèñÂæóÈ†ÅÈù¢ÂÖßÂÆπÂçÄÂ°ä"""
        return [
            # Ê®ôÈ°åËàáÁ∏ΩË¶Ω
            {
                "object": "block",
                "type": "heading_1",
                "heading_1": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "üìã Á∏ΩË¶Ω | Overview"
                            }
                        }
                    ]
                }
            },
            {
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "Êú¨Êñá‰ª∂ÂàÜÊûê "
                            }
                        },
                        {
                            "type": "text",
                            "text": {
                                "content": "Cursor„ÄÅVS Code„ÄÅTrae Âíå Claude Desktop"
                            },
                            "annotations": {
                                "bold": True
                            }
                        },
                        {
                            "type": "text",
                            "text": {
                                "content": " Âú® MCP (Model Context Protocol) Ë®≠ÂÆöÊ†ºÂºè‰∏äÁöÑÊ†∏ÂøÉÂ∑ÆÁï∞„ÄÇ"
                            }
                        }
                    ]
                }
            },
            
            # ÂàÜÈöîÁ∑ö
            {
                "object": "block",
                "type": "divider",
                "divider": {}
            },
            
            # ÈóúÈçµÁôºÁèæ
            {
                "object": "block",
                "type": "heading_2",
                "heading_2": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "üéØ ÈóúÈçµÁôºÁèæ"
                            }
                        }
                    ]
                }
            },
            {
                "object": "block",
                "type": "callout",
                "callout": {
                    "icon": {
                        "emoji": "üí°"
                    },
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "Claude Desktop ‰ΩøÁî®Ëàá Cursor Âπæ‰πéÁõ∏ÂêåÁöÑÊ†ºÂºèÔºåÊé°Áî® mcpServers Ê†πÈçµÔºÅ"
                            },
                            "annotations": {
                                "bold": True
                            }
                        }
                    ]
                }
            },
            
            # ÂêÑ IDE Ë®≠ÂÆöÊ†ºÂºèÁØÑ‰æã
            {
                "object": "block",
                "type": "heading_2",
                "heading_2": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "üîß Ë®≠ÂÆöÊ†ºÂºèÁØÑ‰æã"
                            }
                        }
                    ]
                }
            },
            
            # Cursor Ë®≠ÂÆö
            {
                "object": "block",
                "type": "heading_3",
                "heading_3": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "Cursor MCP Ë®≠ÂÆö"
                            }
                        }
                    ]
                }
            },
            {
                "object": "block",
                "type": "code",
                "code": {
                    "language": "json",
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": """{
  "mcpServers": [
    {
      "name": "figma-ai-bridge",
      "url": "http://localhost:3000/figma",
      "description": "Figma Ë®≠Ë®àÁ®øËß£ÊûêÊúçÂãô"
    }
  ],
  "aiParameters": {
    "temperature": 0.7,
    "maxTokens": 2048
  }
}"""
                            }
                        }
                    ]
                }
            },
            
            # Claude Desktop Ë®≠ÂÆö
            {
                "object": "block",
                "type": "heading_3",
                "heading_3": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "Claude Desktop MCP Ë®≠ÂÆö ‚≠ê"
                            }
                        }
                    ]
                }
            },
            {
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "ÈÖçÁΩÆÊ™îÊ°à‰ΩçÁΩÆÔºö"
                            }
                        },
                        {
                            "type": "text",
                            "text": {
                                "content": "~/Library/Application Support/Claude/claude_desktop_config.json"
                            },
                            "annotations": {
                                "code": True
                            }
                        }
                    ]
                }
            },
            {
                "object": "block",
                "type": "code",
                "code": {
                    "language": "json",
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": """{
  "mcpServers": {
    "filesystem": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-filesystem"]
    },
    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
      }
    }
  }
}"""
                            }
                        }
                    ]
                }
            },
            
            # Ê†ºÂºèÊØîËºÉ
            {
                "object": "block",
                "type": "heading_2",
                "heading_2": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "üìä Ê†ºÂºèÊØîËºÉ"
                            }
                        }
                    ]
                }
            },
            {
                "object": "block",
                "type": "table",
                "table": {
                    "table_width": 3,
                    "has_column_header": True,
                    "has_row_header": False,
                    "children": [
                        {
                            "object": "block",
                            "type": "table_row",
                            "table_row": {
                                "cells": [
                                    [{"type": "text", "text": {"content": "IDE"}}],
                                    [{"type": "text", "text": {"content": "Ê†πÈçµ"}}],
                                    [{"type": "text", "text": {"content": "Áõ∏ÂÆπÊÄß"}}]
                                ]
                            }
                        },
                        {
                            "object": "block",
                            "type": "table_row",
                            "table_row": {
                                "cells": [
                                    [{"type": "text", "text": {"content": "Cursor"}}],
                                    [{"type": "text", "text": {"content": "mcpServers"}}],
                                    [{"type": "text", "text": {"content": "üü¢ ÂÆåÂÖ®Áõ∏ÂÆπ"}}]
                                ]
                            }
                        },
                        {
                            "object": "block",
                            "type": "table_row",
                            "table_row": {
                                "cells": [
                                    [{"type": "text", "text": {"content": "VS Code"}}],
                                    [{"type": "text", "text": {"content": "servers"}}],
                                    [{"type": "text", "text": {"content": "üü° ÈúÄË¶ÅËΩâÊèõ"}}]
                                ]
                            }
                        },
                        {
                            "object": "block",
                            "type": "table_row",
                            "table_row": {
                                "cells": [
                                    [{"type": "text", "text": {"content": "Claude Desktop"}}],
                                    [{"type": "text", "text": {"content": "mcpServers"}}],
                                    [{"type": "text", "text": {"content": "üü¢ ÂéüÁîüÊîØÊè¥"}}]
                                ]
                            }
                        }
                    ]
                }
            },
            
            # ÁµêË´ñ
            {
                "object": "block",
                "type": "heading_2",
                "heading_2": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "üí° ÁµêË´ñËàáÂª∫Ë≠∞"
                            }
                        }
                    ]
                }
            },
            {
                "object": "block",
                "type": "bulleted_list_item",
                "bulleted_list_item": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "ÊúÄ‰Ω≥ÈÅ∑ÁßªË∑ØÂæëÔºöCursor ‚Üî Claude DesktopÔºàÈõ∂ÊàêÊú¨Ôºâ"
                            },
                            "annotations": {
                                "bold": True
                            }
                        }
                    ]
                }
            },
            {
                "object": "block",
                "type": "bulleted_list_item",
                "bulleted_list_item": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "‰ºÅÊ•≠Á¥öÊáâÁî®ÔºöVS Code Êèê‰æõÊúÄ‰Ω≥ÂÆâÂÖ®ÊÄß"
                            }
                        }
                    ]
                }
            },
            {
                "object": "block",
                "type": "bulleted_list_item",
                "bulleted_list_item": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "È´òÊïàËÉΩÈúÄÊ±ÇÔºöTrae Êèê‰æõÂ∞àÊ°àÊÑüÁü•ÂäüËÉΩ"
                            }
                        }
                    ]
                }
            },
            
            # È†ÅÂ∞æ
            {
                "object": "block",
                "type": "divider",
                "divider": {}
            },
            {
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "üìÖ Âª∫Á´ãÊó•ÊúüÔºö2025-06-11 | üìù ÁâàÊú¨Ôºöv1.0 | üë§ ‰ΩúËÄÖÔºöChristian Wu"
                            },
                            "annotations": {
                                "italic": True,
                                "color": "gray"
                            }
                        }
                    ]
                }
            }
        ]

def main():
    """‰∏ªË¶ÅÂü∑Ë°åÂáΩÊï∏"""
    print("üöÄ MCP Ë®≠ÂÆöÊ†ºÂºèÂ∑ÆÁï∞ÂàÜÊûê - Notion Êï¥ÂêàÂ∑•ÂÖ∑")
    print("=" * 50)
    
    # Ë®≠ÂÆöÂèÉÊï∏
    DATABASE_ID = "20ede957-d4e5-8033-b64d-fb4f53111611"
    
    # ÂæûÁí∞Â¢ÉËÆäÊï∏ÊàñÁõ¥Êé•Ëº∏ÂÖ•ÂèñÂæó Token
    NOTION_TOKEN = os.getenv('NOTION_TOKEN')
    
    if not NOTION_TOKEN:
        print("üí° Ë´ãËº∏ÂÖ•ÊÇ®ÁöÑ Notion Integration Token:")
        NOTION_TOKEN = input("Token (secret_...): ").strip()
        
    if not NOTION_TOKEN or not NOTION_TOKEN.startswith('secret_'):
        print("‚ùå Token Ê†ºÂºè‰∏çÊ≠£Á¢∫ÔºåÊáâË©≤‰ª• 'secret_' ÈñãÈ†≠")
        return
    
    print(f"üéØ ÁõÆÊ®ôË≥áÊñôÂ∫´ ID: {DATABASE_ID}")
    print(f"üîë ‰ΩøÁî® Token: {NOTION_TOKEN[:10]}...")
    
    # Âª∫Á´ã Notion ÂÆ¢Êà∂Á´Ø
    notion = NotionMCPIntegration(NOTION_TOKEN)
    
    # Âü∑Ë°åÂª∫Á´ãÈ†ÅÈù¢
    print("\nüì§ ÈñãÂßãÂª∫Á´ã MCP ÂàÜÊûêÈ†ÅÈù¢...")
    result = notion.create_mcp_analysis_page(DATABASE_ID)
    
    if result:
        page_url = result.get('url', 'Êú™ÂèñÂæóÈ†ÅÈù¢ÈÄ£Áµê')
        page_id = result.get('id', 'Êú™ÂèñÂæóÈ†ÅÈù¢ ID')
        
        print("\nüéâ Âü∑Ë°åÊàêÂäüÔºÅ")
        print("=" * 50)
        print(f"‚úÖ È†ÅÈù¢Â∑≤Âª∫Á´ãÂÆåÊàê")
        print(f"üìÑ È†ÅÈù¢ÈÄ£ÁµêÔºö{page_url}")
        print(f"üÜî È†ÅÈù¢ IDÔºö{page_id}")
        print(f"üóÇÔ∏è Ë≥áÊñôÂ∫´ IDÔºö{DATABASE_ID}")
        print("\nüìù È†ÅÈù¢ÂÖßÂÆπÂåÖÂê´Ôºö")
        print("   ‚Ä¢ üìã MCP Ê†ºÂºèÁ∏ΩË¶Ω")
        print("   ‚Ä¢ üîß ÂêÑ IDE Ë®≠ÂÆöÁØÑ‰æã")
        print("   ‚Ä¢ üìä Ê†ºÂºèÊØîËºÉÁü©Èô£")
        print("   ‚Ä¢ üéØ ÈóúÈçµÁôºÁèæËàáÁµêË´ñ")
        print("   ‚Ä¢ üí° ‰ΩøÁî®Âª∫Ë≠∞")
    else:
        print("\n‚ùå È†ÅÈù¢Âª∫Á´ãÂ§±Êïó")
        print("Ë´ãÊ™¢Êü•Ôºö")
        print("1. Token ÊòØÂê¶Ê≠£Á¢∫")
        print("2. Integration ÊòØÂê¶Â∑≤ÂÖ±‰∫´Áµ¶Ë≥áÊñôÂ∫´")
        print("3. Ë≥áÊñôÂ∫´ ID ÊòØÂê¶Ê≠£Á¢∫")

if __name__ == "__main__":
    main()
